// Object

/*
    object - посилальний тип даних, є самостійною одиницею, що має
    властивості та певний тип.

    У об'єкта є властивості, які з ним асоціюються. Властивість об'єкта можна
    розуміти як змінні, закріплені за ним.
*/

// Для того щоб створити об'єкт у нас є декілька способів.

// console.log('------ Конструктор класса ------');
// Виклик конструктора класу Object
let objectExample_1 = new Object();

// Далі наповнюємо його даними

objectExample_1.name = 'John';
objectExample_1.age = 22;

// У прикладі вище ми створили всередині об'єкта властивості name і age і записали в них дані

// console.log(objectExample_1)


// console.log('------ Літерал ------');
// //Ми можемо використовувати простіший і зручніший синтаксис для створення об'єктів.
// // Створення за допомогою літерала.
//
// let objectExample_2 = {}
//
// // наповнення об'єкта даними
//
// objectExample_2.name = 'Alice';
// objectExample_2.age = 30;
//
// console.log(objectExample_2)


// Якщо ми використовуємо літеральний синтаксис, то можемо створити об'єкт одразу зі значеннями

// let objectExample_3 = {
//     name: 'Volodymyr',
//     age: 25
// }
//
// console.log(objectExample_3)


// Як бачите, літеральний синтаксис набагато зручніший, ніж створення через
// конструктор класу. Його і будемо використовувати.






// console.log('------ Отримання значень властивостей ------');
// // Припустимо у нас є об'єкт з даними, тепер ми хочемо витягнути з нього
// // якісь певні дані за ключем.
//
// let user = {
//     firstName: 'John',
//     lastName: 'Doe',
//     age: 30,
//     gender: 'male',
//     middleName: null
// }
//
// user.middleName = 'Alex'
//
// // Припустимо, я хочу отримати ім'я цього користувача.
//
// console.log(user);
// console.log(user.firstName);
//
// // Аналогічним чином я можу отримати доступ до всіх значень властивостей об'єкта
//
// console.log(user.lastName);
// console.log(user.age);
// console.log(user.gender);


console.log('------ Синтаксис квадратних дужок - [] ------');
// Ключі в об'єктах це завжди рядки або Symbol, зосередимося поки що на рядках.
// Як ми знаємо рядки не завжди можуть складатися з одного слова, в якому немає пробілів
// і як бути якщо нам потрібно створити властивість в об'єкті, ім'я якої складатиметься з
// з 2х слів, розділених пробілами, або взагалі буде виразом.
// для цього будемо використовувати []

// let student = {
//     firstName: 'John',
//     'vova shaitan': 'dog',
//     ['last name']: 'Dou',           // Ім'я властивості, що містить пробіл
//     [prompt()]: 30,                 // Обчислюване ім'я властивості
// }
//
// console.log(student);
// console.log(student["vova shaitan"]);

// Отримати значення цих властивостей у нас просто так не вийде. Якщо ми будемо використовувати
// синтаксис крапки '.' то отримаємо помилку. Замість цього будемо використовувати квадратні
// дужки []

// console.log(student.firstName)              // Звичайний спосіб
// console.log(student['last name'])
// console.log(student['student-age'])

// Готово, тепер усе працює!



// console.log('------ Вкладені об\'єкти ------');
/*
    Також варто розуміти, що якщо ми можемо вкладати примітиви в об'єкти, роблячи їх
    значеннями ключів, то аналогічним чином ми можемо вкладати й в інші об'єкти.
*/

// const deepObject = {
//     name: 'Mazda',
//     model: '#1',
//     owner: {
//         firstName: 'John',
//         lastNam: 'Doe',
//         age: 12
//     }
// }
//
// console.log(deepObject)
// console.log(deepObject.owner.firstName)
// console.log(deepObject['owner']['firstName'])

// Це простий приклад, насправді вкладеність може бути дуже великою, важливо
// розуміти що так можна робити.

// const user1 = {
//     name: 'vova'
// }
//
// const user2 = {
//     name: 'vova'
// }
//
// console.log(user1 === user2) // порівняння посилань на обєкти
//
//
//
// const a = 'vova';
// const b = 'vova';
// console.log(a === b) // порівняння значень

// Копіювання посилання на обєкте, а не самого обєкту.
const pet1 = { // link to data
    type: 'Dog'
}

const pet2 = pet1; // copy link to data

pet2.name = 'Doggy';
pet1.age = 21;

// console.log(pet1 === pet2) // true
console.log(pet1, pet2)
